#include<bits/stdc++.h>
using namespace std;

class DSU{
    private:
    vector<int>rank, parent;
    
    public:
    DSU(int size){
        rank.resize(size, 0);
        parent.resize(size,0);
        iota(parent.begin() , parent.end() , 0);
    };
    
    
    int findParent(int value){
        if(parent[value] == value) return value;
        
        return parent[value] = findParent(parent[value]);
    }
    
    void Union(int ele1, int ele2){
        int parent1 = findParent(ele1);
        int parent2 = findParent(ele2);
        
        if(rank[parent1] > rank[parent2]){
            parent[parent2] = parent1;
        }
        else if(rank[parent2] > rank[parent1]){
            parent[parent1] =parent2; 
        }
        else{
            rank[parent1]++;
            parent[parent2] = parent1;
        }
    }
    
    int CountComponents(){
        unordered_set<int> uniqueParents;
        for (int i = 0; i < n; i++) {
            uniqueParents.insert(findParent(i));
        }
        return uniqueParents.size();
    }
} ;

int Count_Components2(unordered_map<int, vector<int>> & graph ,  int nodes){
    DSU * d = new DSU(nodes);
    for(auto nodes : graph){
        for(auto node : nodes.second){
            if(d->findParent(nodes.first) != d->findParent(node)){
                d->Union(nodes.first,node);
            }
        }
    }
    return d->CountComponents();
}

int Count_Components1(unordered_map<int, vector<int>> & graph ,  int nodes){
    vector<bool>vis(nodes , false);
    int count = 0;
    
    
    function<void(int)>call = [&](int curr){
        vis[curr] = true;
        
        for(int next : graph[curr]){
            if(!vis[next]){
                call(next);
            }
        }
    };
    
    for(int i =0 ; i < nodes ; i++){
        if(!vis[i]){
            count++;
            call(i);
        }
    }
    
    return count;
}

int main(){
    int nodes,edges;
    cout<<"Enter nodes and edges :";
    cin >> nodes>>edges;
    
    unordered_map<int,vector<int>>graph;
    
    for(int i = 0; i < edges; i++){
        int x ,y ;
        cout<<"Enter Edge : [x,y]";
        cin >> x >> y;
        graph[x].push_back(y);
        graph[y].push_back(x);
    }
    
    cout<<Count_Components1(graph , nodes)<< endl;
    cout<<Count_Components2(graph,nodes)<<endl;
    return 0;
}
